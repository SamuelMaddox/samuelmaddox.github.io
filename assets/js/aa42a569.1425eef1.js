"use strict";(self.webpackChunkdeveloper_notes=self.webpackChunkdeveloper_notes||[]).push([[586],{3774:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var s=n(6672);const o={},i=s.createContext(o);function r(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:t},e.children)}},5698:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/avoid-the-test-user-img1-95ccba0a92add89dec7cc5001bdf9144.png"},6913:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>a,default:()=>l,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"articles/avoid-the-test-user/index","title":"Avoid the Test User","description":"AUTHOR: Kent C. Dodds","source":"@site/docs/articles/avoid-the-test-user/index.md","sourceDirName":"articles/avoid-the-test-user","slug":"/articles/avoid-the-test-user/","permalink":"/articles/avoid-the-test-user/","draft":false,"unlisted":false,"editUrl":"https://github.com/samuelmaddox/samuelmaddox/blob/main/docs/articles/avoid-the-test-user/index.md","tags":[],"version":"current","lastUpdatedAt":1749129615000,"sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"articlesSidebar","previous":{"title":"Avoid Hasty Abstractions Testing","permalink":"/articles/avoid-hasty-abstractions-testing/"},"next":{"title":"Avoid Nesting when You\'re Testing","permalink":"/articles/avoid-nesting-when-your-testing"}}');var o=n(3420),i=n(3774);const r={sidebar_position:3},a="Avoid the Test User",h={},d=[{value:"The Test User",id:"the-test-user",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const t={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",img:"img",p:"p",strong:"strong",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"avoid-the-test-user",children:"Avoid the Test User"})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.em,{children:"AUTHOR: Kent C. Dodds"})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.em,{children:"POSTED: May 24th, 2019"})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsxs)(t.em,{children:["LINK: ",(0,o.jsx)(t.a,{href:"https://kentcdodds.com/blog/avoid-the-test-user",children:"https://kentcdodds.com/blog/avoid-the-test-user"})]})}),"\n",(0,o.jsx)(t.p,{children:"The two users your UI code has are 1) The end user that's interacting with your component and 2) the developer rendering your component. Imagine you have the following UI (taken from my Advanced React Patterns material):"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"User Settings Form",src:n(5698).A+"",width:"300",height:"413"})}),"\n",(0,o.jsxs)(t.p,{children:["The form component here is called ",(0,o.jsx)(t.code,{children:"<UserSettings />"}),". This component exposes a certain API for the developers rendering it and the users using it."]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"The End User"}),': Renders a username field (which is disabled because it cannot be changed), tagline field, and biography field. When the end user changes one of the values, the reset and submit buttons become enabled. When they click the reset button the form is reset and when they click the submit button it saves the user\'s info (showing a loading state while we wait for the request to finish). (In this demo, if you type "fail" in the tagline or biography then the request fails and you can see the error state as well).']}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"The Developer User"}),": They render this component within a ",(0,o.jsx)(t.code,{children:"<UserProvider />"})," so the component can access and update the application ",(0,o.jsx)(t.code,{children:"user"})," state and dispatch which is stored in React context."]}),"\n",(0,o.jsx)(t.p,{children:"These are the only two users that your component should be concerned with. This component can experience a lot of changes over time. If it makes changes that alter the developer's API or the end user's expectations, then additional changes need to be made. If it changes the API, (like maybe it accepts a user prop instead of accessing it from context) then the developer user will have to alter its usage to account for that. If it changes the user experience, then maybe there will need to be release notes explaining the updates, or some training material updated for example."}),"\n",(0,o.jsx)(t.p,{children:"However, it can change in other ways too. Internal refactorings which change how things are implemented (for example, to make the code easier to follow), but don't change the experience of the developer using the component or the end user using it. With these kinds of changes, no additional work outside the component is needed."}),"\n",(0,o.jsx)(t.h2,{id:"the-test-user",children:"The Test User"}),"\n",(0,o.jsx)(t.p,{children:"So what does this have to do with testing? One thing that I talk about a lot is"}),"\n",(0,o.jsxs)(t.blockquote,{children:["\n",(0,o.jsx)(t.p,{children:'"The more your tests resemble the way your software is used, the more confidence they can give you.\u200a"'}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"So knowing how your software is used is really valuable. It gives you a guide for knowing how to test the component."}),"\n",(0,o.jsxs)(t.p,{children:["But far too often, I see tests which are ",(0,o.jsx)(t.a,{href:"testing-implementation-details",children:"testing implementation details"})," (read this before continuing if you haven't already). When you do this, you introduce a third user. The developer user and the end user are really all that matters for this component. So long as it serves those two, then it has a reason to exist. And when you're maintaining the component you need to keep those two users in mind to make sure that if you break the contract with them, you do something to handle that change."]}),"\n",(0,o.jsx)(t.p,{children:"But as soon as you start testing things which your developer user and end user don't know or care about (implementation details), you add a third testing user, you're now having to keep that third user in your head and make sure you account for changes that affect the testing user as well."}),"\n",(0,o.jsx)(t.p,{children:"And for what? To get \"confidence?\" But what are you getting confidence in when you test things this way? You're getting confidence that things work for the testing user. But nobody cares about the testing user. The testing user doesn't pay the bills like the end user. It doesn't affect the rest of the system like the developer user."}),"\n",(0,o.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsx)(t.p,{children:"Writing tests that include implementation details is all downside and no upside. Focus on the developer user and the end user and your tests will actually give you confidence that things will continue to work for them. When your tests break it becomes a cue for you to know that you have other changes to make elsewhere to account for the changes you've made. Avoid testing implementation details and you'll be much better off."}),"\n",(0,o.jsxs)(t.p,{children:["P.S. There are definitely situations where mocking and testing implementation details is necessary, read more about that in ",(0,o.jsx)(t.a,{href:"the-merits-of-mocking",children:"The Merits of Mocking"})]})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);