"use strict";(self.webpackChunkdeveloper_notes=self.webpackChunkdeveloper_notes||[]).push([[321],{2413:(e,n,s)=>{s.d(n,{Ay:()=>r,RM:()=>o});var i=s(3420),t=s(3774);const o=[{value:"Custom Rules",id:"custom-rules",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"custom-rules",children:"Custom Rules"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Article: ",(0,i.jsx)(n.a,{href:"/articles/why-you-should-use-string-literal-unions-over-enums-in-typescript",children:"Why you should use string literal unions over enums in TypeScript"})]})}),"\n",(0,i.jsxs)(n.p,{children:["Add the following custom rules to your ",(0,i.jsx)(n.code,{children:"eslint.config.mjs"})," config."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",metastring:'title="eslint.config.mjs" {7-18}',children:'/* ... */\nexport default defineConfig([\n  includeIgnoreFile(gitignorePath),\n  {\n    files: ["**/*.{js,jsx,ts,tsx,mjs,cjs,mts,cts}"],\n    extends: [js.configs.recommended, tseslint.configs.recommended],\n    rules: {\n      "no-console": ["error", { allow: ["warn", "error"] }],\n      "no-alert": "error",\n      "no-restricted-syntax": [\n        "error",\n        {\n          selector: "TSEnumDeclaration",\n          message:\n            "Enums are forbidden. Use string union types instead. Example: type Suit = \'HEARTS\' | \'DIAMONDS\' | \'SPADES\' | \'CLUBS\';",\n        },\n      ],\n    },\n  },\n  /* ... */\n]);\n'})})]})}function r(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},3270:(e,n,s)=>{s.d(n,{Ay:()=>r,RM:()=>o});var i=s(3420),t=s(3774);const o=[];function l(e){const n={a:"a",admonition:"admonition",code:"code",p:"p",...(0,t.R)(),...e.components};return(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["There is an option for config files to be defined using typescript, ",(0,i.jsx)(n.code,{children:"eslint.config.mts"}),". It requires ",(0,i.jsx)(n.code,{children:"jiti"})," as an optional dev dependency. Native support for typescript without the need for jiti is in experimental as of Node.js >= 22.10.0 (See ",(0,i.jsx)(n.a,{href:"https://nodejs.org/docs/latest-v22.x/api/cli.html#--experimental-strip-types",children:"--experimental-strip-types"})," flag)."]})})}function r(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},4126:(e,n,s)=>{s.d(n,{Ay:()=>r,RM:()=>o});var i=s(3420),t=s(3774);const o=[{value:"Docusaurus",id:"docusaurus",level:2},{value:"Docusaurus <code>.gitignore</code>",id:"docusaurus-gitignore",level:3},{value:"Docusaurus plugin",id:"docusaurus-plugin",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"docusaurus",children:"Docusaurus"}),"\n",(0,i.jsxs)(n.h3,{id:"docusaurus-gitignore",children:["Docusaurus ",(0,i.jsx)(n.code,{children:".gitignore"})]}),"\n",(0,i.jsxs)(n.p,{children:["Merge the ",(0,i.jsx)(n.code,{children:"./docusaurus/.gitignore"})," into the root ",(0,i.jsx)(n.code,{children:".gitignore"})," so that eslint properly ignores the ignored docusaurus files. Example:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",metastring:'title=".gitignore"',children:"# ...\n\n# Docusaurus\n/docusaurus/node_modules\n/docusaurus/build\n.docusaurus\n.cache-loader\n\n"})}),"\n",(0,i.jsx)(n.h3,{id:"docusaurus-plugin",children:"Docusaurus plugin"}),"\n",(0,i.jsx)(n.admonition,{type:"warning",children:(0,i.jsxs)(n.p,{children:["This plugin doesn't appear to be compatible with the ",(0,i.jsx)(n.a,{href:"https://eslint.org/docs/latest/use/configure/configuration-files",children:"Flat Configuration"})," format of ESLint v9, and the rules it defines are not that important for most use cases"]})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Review the ",(0,i.jsx)(n.a,{href:"https://docusaurus.io/docs/api/misc/@docusaurus/eslint-plugin",children:"Docusaurus ESLint Plugin Documentation"})," for changes."]})})]})}function r(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8994:(e,n,s)=>{s.d(n,{Ay:()=>c,RM:()=>r});var i=s(3420),t=s(3774),o=s(4646);const l='# ESLint\n\n## What is ESLint\n\n[ESLint](https://eslint.org/) is a tool for identifying and reporting on patterns found in ECMAScript/JavaScript code, with the goal of making code more consistent and avoiding bugs.\n\n## No Enums Custom Rule\n\nOur eslint config defines a custom rule that forbids the use of `enums`. The reason for this rule is best explained by this article: [Why you should use string literal unions over enums in TypeScript](../99-articles/why-you-should-use-string-literal-unions/index.md).\n\n## Print Full Config\n\nIf you want to see the final rule set, all plugins, and names of all extended configs, use one of the following commands:\n\n- Using npx: `npx eslint --print-config src/file.tsx > tmp.config.json`\n\n- Using pnpx: `pnpx eslint --print-config src/file.tsx > tmp.config.json`\n\n## Disable Node\n\nTo disable a line of code do the following:\n\n```js\n// Explanation of why there is a disable statement\n// eslint-disable-next-line no-console\nconsole.log("bar");\n```\n\nTo disable a block of code do the following:\n\n```js\n// Explanation of why there is a disable statement\n/* eslint-disable no-console */\nconsole.log("bar");\n/* eslint-enable no-console */\n```\n\n## Disable Linting Conventions\n\nPlease follow these 2 conventions When disabling a line or block of code:\n\n**Convention 1** - Only disable the offending rule, not all of eslint. Example:\n\n**Good** = `/* eslint disable no-console */`\n**Bad** = `/* eslint disable */`\n\n**Convention 2** - Provide a description explaining why the rule is disabled\n\nThe description must come after the configuration and needs to be separated from the configuration by two or more consecutive - characters. For example:\n\n```js\n// eslint-disable-next-line no-console -- Here\'s a description about why this configuration is necessary.\nconsole.log("hello");\n\n/* eslint-disable-next-line no-console --\n * Here\'s a very long description about why this configuration is necessary\n * along with some additional information\n **/\nconsole.log("hello");\n```\n\n## Ignore root files or directories\n\nSee ESLint documentation on [Ignoring Files and Directories](https://eslint.org/docs/latest/use/configure/ignore)\n',r=[{value:"Print Full Config",id:"print-full-config",level:2},{value:"VS Code Extension",id:"vs-code-extension",level:2},{value:"VS Code Settings",id:"vs-code-settings",level:2},{value:"Project Documentation",id:"project-documentation",level:2},{value:"Update <code>01-scripts.md</code> Documentation",id:"update-01-scriptsmd-documentation",level:3},{value:"Create <code>02-code-quality/02-eslint.md</code> Documentation",id:"create-02-code-quality02-eslintmd-documentation",level:3},{value:"Update <code>98-vs-code/02-vs-code-extensions.md</code> Documentation",id:"update-98-vs-code02-vs-code-extensionsmd-documentation",level:3},{value:"Create <code>99-articles/why-you-should-use-string-literal-unions</code> Article",id:"create-99-articleswhy-you-should-use-string-literal-unions-article",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"print-full-config",children:"Print Full Config"}),"\n",(0,i.jsx)(n.p,{children:"If you want to see the final rule set, all plugins, and names of all extended configs, use one of the following commands:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Using npx: ",(0,i.jsx)(n.code,{children:"npx eslint --print-config src/file.tsx > tmp.config.json"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Using pnpx: ",(0,i.jsx)(n.code,{children:"pnpx eslint --print-config src/file.tsx > tmp.config.json"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"vs-code-extension",children:"VS Code Extension"}),"\n",(0,i.jsxs)(n.p,{children:["Add the following to the ",(0,i.jsx)(n.code,{children:".vscode/extensions.json"})," file."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:'title=".vscode/extensions.json"',children:'{\n  "recommendations": [\n    . . .\n    "dbaeumer.vscode-eslint",\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"vs-code-settings",children:"VS Code Settings"}),"\n",(0,i.jsxs)(n.p,{children:["Add the following to the ",(0,i.jsx)(n.code,{children:".vscode/settings.json"})," file."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:'title=".vscode/settings.json"',children:'{\n  "eslint.useFlatConfig": true\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"project-documentation",children:"Project Documentation"}),"\n",(0,i.jsxs)(n.h3,{id:"update-01-scriptsmd-documentation",children:["Update ",(0,i.jsx)(n.code,{children:"01-scripts.md"})," Documentation"]}),"\n",(0,i.jsxs)(n.p,{children:["Add or update the following to the ",(0,i.jsx)(n.code,{children:"docusaurus/docs/01-scripts.md"})," documentation"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-md",metastring:'title="docusaurus/docs/01-scripts.md"',children:"| `pnpm lint` | Runs ESLint for all files that are NOT included in the `.gitignore` |\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"create-02-code-quality02-eslintmd-documentation",children:["Create ",(0,i.jsx)(n.code,{children:"02-code-quality/02-eslint.md"})," Documentation"]}),"\n",(0,i.jsxs)(n.p,{children:["Create a ",(0,i.jsx)(n.code,{children:"docusaurus/docs/02-code-quality/02-eslint.md"})," file and add the following:"]}),"\n",(0,i.jsx)(o.A,{language:"markdown",title:"docusaurus/docs/02-code-quality/02-eslint.md",children:l}),"\n",(0,i.jsxs)(n.h3,{id:"update-98-vs-code02-vs-code-extensionsmd-documentation",children:["Update ",(0,i.jsx)(n.code,{children:"98-vs-code/02-vs-code-extensions.md"})," Documentation"]}),"\n",(0,i.jsxs)(n.p,{children:["Add the follow to the ",(0,i.jsx)(n.code,{children:"docusaurus/docs/98-vs-code/02-vs-code-extensions.md"})," documentation"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-md",metastring:'title="docusaurus/docs/98-vs-code/02-vs-code-extensions.md"',children:"| [ESLint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint) | Provides immediate linting when writing code |\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"create-99-articleswhy-you-should-use-string-literal-unions-article",children:["Create ",(0,i.jsx)(n.code,{children:"99-articles/why-you-should-use-string-literal-unions"})," Article"]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"I'm paranoid about broken links due to relevant articles being removed. Therefore, when I find an article that I think is relevant to a project, I like to save a copy of that article within the project's documentation."})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"02-code-quality/02-eslint.md"})," documentation links to the following article"]})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Create a ",(0,i.jsx)(n.code,{children:"docusaurus/docs/99-articles/why-you-should-use-string-literal-unions"})," directory."]}),"\n",(0,i.jsxs)(n.li,{children:["Copy the ",(0,i.jsx)(n.a,{href:"https://github.com/SamuelMaddox/samuelmaddox/tree/main/docs/articles/why-you-should-use-string-literal-unions-over-enums-in-typescript",children:"Why You Should Use String Literal Unions Over Enums in TypeScript"})," article contents into the above directory."]}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},9059:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>m,contentTitle:()=>p,default:()=>f,frontMatter:()=>h,metadata:()=>i,toc:()=>g});const i=JSON.parse('{"id":"dev-notes/library-tools/eslint/typescript","title":"TypeScript","description":"Configure","source":"@site/docs/dev-notes/04-library-tools/01-eslint/01-typescript.mdx","sourceDirName":"dev-notes/04-library-tools/01-eslint","slug":"/dev-notes/library-tools/eslint/typescript","permalink":"/dev-notes/library-tools/eslint/typescript","draft":false,"unlisted":false,"editUrl":"https://github.com/samuelmaddox/samuelmaddox/blob/main/docs/dev-notes/04-library-tools/01-eslint/01-typescript.mdx","tags":[],"version":"current","lastUpdatedAt":1749129615000,"sidebarPosition":1,"frontMatter":{"title":"TypeScript"},"sidebar":"devNotesSidebar","previous":{"title":"Docusaurus","permalink":"/dev-notes/repo-setup/docusaurus/"},"next":{"title":"NEXT.js","permalink":"/dev-notes/library-tools/eslint/nextjs"}}');var t=s(3420),o=s(3774);function l(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"install-eslint",children:"Install ESLint"}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["Review the ",(0,t.jsx)(n.a,{href:"https://eslint.org/docs/latest/use/getting-started",children:"Official ESLint Installation Instructions"})," for changes."]})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Follow ESLint's ",(0,t.jsx)(n.a,{href:"https://eslint.org/docs/latest/use/getting-started",children:"Getting Started"})," guide."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Add the linting script in your project's ",(0,t.jsx)(n.code,{children:"package.json"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'"lint": "pnpm dlx eslint ."\n'})}),"\n"]}),"\n"]})]})}function r(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}var d=s(3270),c=s(2413),a=s(4126),u=s(8994);const h={title:"TypeScript"},p="ESLint TypeScript",m={},g=[{value:"Install ESLint",id:"install-eslint",level:2},{value:"Configure",id:"configure",level:2},...d.RM,...c.RM,...a.RM,...u.RM];function x(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"eslint-typescript",children:"ESLint TypeScript"})}),"\n",(0,t.jsx)(r,{}),"\n",(0,t.jsx)(n.h2,{id:"configure",children:"Configure"}),"\n",(0,t.jsx)(d.Ay,{}),"\n",(0,t.jsx)(n.p,{children:"Install the following plugins and configs:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-terminal",children:"pnpm add --save-dev @eslint/compat @eslint/js @eslint/css @eslint/json @eslint/markdown typescript-eslint\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Modify the ",(0,t.jsx)(n.code,{children:"eslint.config.mjs"})," file to match the following:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",metastring:'title="eslint.config.mjs"',children:'import { fileURLToPath } from "node:url";\nimport { defineConfig } from "eslint/config";\nimport { includeIgnoreFile } from "@eslint/compat";\nimport js from "@eslint/js";\n// import css from "@eslint/css"; // \ud83d\udfe1 TODO: Does this work yet for TailwindCSS v4.0?\nimport json from "@eslint/json";\nimport markdown from "@eslint/markdown";\nimport tseslint from "typescript-eslint";\n\nconst gitignorePath = fileURLToPath(new URL(".gitignore", import.meta.url));\n\nexport default defineConfig([\n  includeIgnoreFile(gitignorePath),\n  {\n    files: ["**/*.{js,jsx,ts,tsx,mjs,cjs,mts,cts}"],\n    extends: [js.configs.recommended, tseslint.configs.recommended],\n  },\n  // \ud83d\udfe1 TODO: If you are NOT using TailwindCSS then it should be safe to uncomment this object and\n  // remove the `languageOptions` property\n  // \ud83d\udfe1 TODO: Does this work yet for TailwindCSS v4.0?\n  // {\n  //   files: ["**/*.css"],\n  //   language: "css/css",\n  //   languageOptions: {\n  //     tolerant: true, // \ud83d\udfe1 This may be required due to custom syntax that TailwindCSS uses\n  //     customSyntax: tailwindSyntax, // \ud83d\udfe1 This has not been updated yet for TailwindCSS v4.0\n  //   },\n  //   extends: [css.configs.recommended],\n  // },\n  {\n    files: ["**/*.json"],\n    ignores: ["package-lock.json"],\n    language: "json/json",\n    extends: [json.configs.recommended],\n  },\n  {\n    files: ["**/*.md"],\n    extends: [markdown.configs.recommended],\n    language: "markdown/gfm", // \ud83d\udfe1 Optional, include this property if using Github-flavored markdown\n    rules: {\n      "markdown/no-missing-label-refs": "off", // \ud83d\udfe1 Optional, this rule doesn\'t work with Github-flavored markdown alerts\n    },\n  },\n]);\n'})}),"\n",(0,t.jsx)(c.Ay,{}),"\n",(0,t.jsx)(a.Ay,{}),"\n",(0,t.jsx)(u.Ay,{})]})}function f(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(x,{...e})}):x(e)}}}]);